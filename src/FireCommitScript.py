import sys
import time
import subprocess
from prettytable import PrettyTable
from prettytable import PLAIN_COLUMNS
from datetime import date
from datetime import datetime

def Branch():
    print()
    print("__________________________________")
    print("üî± BRANCH")
    returnStr = subprocess.run("git branch", capture_output=True, text=True,shell=True)
    print("Default: " + returnStr.stdout)
    print("To use default one, type: d")
    branchOfRepo = input("üî± BRANCH: ")
    if(branchOfRepo == "d"):
        return returnStr.stdout.strip()
    if(branchOfRepo != "" or len(branchOfRepo.strip()) == 0):
        return "-"    
    return returnStr.stdout.strip()

def Date():
    dateNow = date.today()
    return dateNow.strftime("%B %d, %Y") 

def Time():
    timeNow = datetime.now()
    return timeNow.strftime("%H:%M:%S")

def Authors():
    print()
    print("__________________________________")
    print("üë• Author(s)")
    returnStr = subprocess.run("git config user.name", capture_output=True, text=True,shell=True)
    print("Default: " + returnStr.stdout)
    print("To use default one, type: d")
    authorS = input("üë• Author(s): ")
    if(authorS == "d"):
        return returnStr.stdout.strip()
    if(authorS.strip() != "" or len(authorS.strip()) == 0):
        return "-"
    return returnStr.stdout.strip()

def ShortListOfChanges():
    print()
    print("__________________________________")
    listOfChanges = "üóíÔ∏è DESCRIPTION OF CHANGES: \n\n"
    print("üóíÔ∏è DESCRIPTION OF CHANGES: ")
    print("If you're done, type: r")
    while(True):
        inputItem = input("Item: ")
        if(inputItem == "r"):
            break
        listOfChanges = listOfChanges + "- " + inputItem + "\n"

    return listOfChanges

def Changes():
    dictPossibilitiesChanges = {
        'l': 'LOCAL (üìå)',
        'g': 'GLOBAL (üåê)',
        'm': 'MODULE (üóÉÔ∏è)',
       'sm': 'SUBMODULE (üóÑÔ∏è)',
        'r': 'ROOT (üå≥)',
        'p': 'PERSISTENCE (üß±)',
        'bl': 'BUSINESS_LOGIC (‚ôüÔ∏è)',
        'ui': 'USERINTERFACE (üñºÔ∏è)',
        'as': 'APPLICATION_SERVICE (üíæ)',
        'ds': 'DOMAIN_SERVICE (ü™õ)',
        'dm': 'DOMAIN_MODEL (ü•ù)',
        'd': '-'
    }
    v = PrettyTable()
    v.field_names = ["(1)","(2)"]
    v.add_rows([
        ["LOCAL üìå (l)","GLOBAL üåê (g)"],
        ["MODULE üóÉÔ∏è (m)","SUBMODULE üóÑÔ∏è (sm)"],
        ["ROOT üå≥ (r)","PERSISTENCE: üß± (p)"],
        ["BUSINESS_LOGIC: ‚ôüÔ∏è (bl)","USERINTERFACE: üñºÔ∏è (ui)"],
        ["APPLICATION_SERVICE: üíæ (as)","DOMAIN_SERVICE: ü™õ (ds)"],
        ["DOMAIN_MODEL: ü•ù (dm)","DEFAULT: - (d)"]  
    ])                          
    v.set_style(PLAIN_COLUMNS)
    print()
    print("__________________________________")
    print("Possible üõ†Ô∏è Scope: \n")
    print(v)
    print()
    ch = input("üõ†Ô∏è SCOPE: ")
    return dictPossibilitiesChanges.get(ch," - ")

def Keywords():
    print()
    print("__________________________________")
    keywords = input("üîë Keyword(s): ")
    return keywords    

def Topic():  
    
    dictPossibilitiesTopics = {
       'fi': 'FIX(‚úÖ)',
        't': 'TEST(üõ°Ô∏è)',
        'm': 'MILE(üíé)',
        'r': 'REL(üéÜ)',
        'd': 'DOCS(üìì)',
        'c': 'CONN(üîó)',
       'rf': 'REF(üî™)',
        'a': 'ARCHI(üè¨)',
        'i': 'INFRA(üéõÔ∏è)',
       'ii': 'INIT(üèπ)',
       'u' : 'UP(‚¨ÜÔ∏è)',
       'st': 'STYLE(ü™ü)',
       'fe': 'FEAT(üéâ)',
       'pe': 'PERF(üíØ)',
       'co': 'CORE(üå£)',
       're': 'REV(‚ôªÔ∏è)'
    }

    print()
    y = PrettyTable()
    y.field_names = ["(1)","(2)","(3)","(4)"]
    
    y.add_rows([
        ["FIX(‚úÖ) (fi)","TEST(üõ°Ô∏è) (re)","MILE(üíé) (m)","REL(üéÜ) (r)"],
        ["DOCS(üìì) (d)","CONN(üîó) (c)","REF(üî™) (rf)","ARCHI(üè¨) (a)"],
        ["INFRA(üéõÔ∏è) (i)","INIT(üèπ) (ii)","UP(‚¨ÜÔ∏è) (u)","STYLE(ü™ü) (st)"],
        ["FEAT(üéâ) (fe)","PERF(üíØ) (pe)","CORE(üå£) (co)","REV(‚ôªÔ∏è) (re)"]
    ])
    y.set_style(PLAIN_COLUMNS)
    print("Possible üìã TYPES: \n")
    print(y)
    print()
    top = input("üìã TYPE: ")
    return dictPossibilitiesTopics.get(top,"UP(‚¨ÜÔ∏è)")  

def startWithMsg():
    x = PrettyTable()
    x.set_style(PLAIN_COLUMNS)
    x.field_names = ["  Description"," Content"]

    x.add_rows([
             ["üë• AUTHORS",Authors()],
             ["üõ†Ô∏è SCOPE",Changes()],
             ["üî± BRANCH",Branch()],
             ["üóìÔ∏è DATE",Date()],
             ["üïí TIME",Time()]])

    return x.get_string()

def commitToRepo(inputTopic,inputKeywords,inputBody):
    print()
    inputMsg = inputTopic + " | üîë " + inputKeywords + "\n" + inputBody + "\n\n" + ShortListOfChanges()
    print()
    print("___________________________________________")
    print("Commit Message: \n")
    print(inputMsg)
    print()
    print("___________________________________________")
    print()
    print("""
    ‚ö¨ Checking for unstaged commits...
    """)

    print()

    try:
        returnStr = subprocess.run("git status", capture_output=True, text=True,check=True,shell=True)
        returnStr.check_returncode()
    except subprocess.CalledProcessError: 
        print("‚ùå Checking for unstaged commits failed !")
        print()
        print("‚ö†Ô∏è Committing might not work.")
        print()

    
    if(returnStr.stdout.find("Changes not staged") != -1):
        print("‚ùå Found Unstaged Commits !")
        print()
    else:
        print("‚úÖ Everything clean !")

    print()
    inputStr = input(">>> Proceed [Y | N] ? ")

    if(inputStr == "N" or inputStr == "n"):
        exitProgram()

    print("‚ö¨ Trying to commit...")
    print()
    secParam = "git commit -m \"" + inputMsg + "\""

    if sys.platform.startswith('win32'):
        try:
            retCode = subprocess.run(secParam, check=True) # windows
        except subprocess.CalledProcessError:
            print("‚ùå Commit - Failure !")
    elif sys.platform.startswith('linux'):
        try:
            retCode = subprocess.run(secParam,shell=True,check=True) # linux
        except subprocess.CalledProcessError:
            print("‚ùå Commit - Failure !")
    elif sys.platform.startswith('darwin'):
        try:
            retCode = subprocess.run(secParam,shell=True,check=True)
        except subprocess.CalledProcessError:
            print("‚ùå Commit - Failure !")

    try:
        retCode.check_returncode()
    except subprocess.CalledProcessError: 
        print("‚ùå Commit - Failure !")
        time.sleep(10)
        exitProgram()

    print("‚úÖ Commit - Successful !")    
    print()
    runGitPush = input(">>> Run Git Push [Y | N] ? ")
    if(runGitPush == "N" or runGitPush == "n"):
        exitProgram()

    print("‚ö¨ Trying to push...")
    print()

    try:
        retCodePush = subprocess.run("git push",check=True,shell=True)
        retCodePush.check_returncode()
    except subprocess.CalledProcessError: 
        print("‚ùå Pushing - Failure !")
        time.sleep(5)
        exitProgram()

    print("‚úÖ Pushing - Successful !")

def checkIfGitRepo():
    print()
    print("‚ö¨ Checking if this is a git repository...")
    print()

    try:
        returnStr = subprocess.run("git status", capture_output=True, text=True,check=True,shell=True)
        returnStr.check_returncode()
    except subprocess.CalledProcessError: 
        print("‚ùå This is not a git repository !")
        time.sleep(5)
        exitProgram()

    print("‚úÖ Everything ok !")
    print()

def exitProgram():
    print("""
        - Stopping...
        - üî•FireCommit Exited
        """)
    sys.exit()

def main():
    print("""
    üî•FireCommit - V.5.5
    - Options: op
    - Start:   s
    """)

    checkIfGitRepo()
    inputAction = input("Action: ")

    if(inputAction == "s"):
        print()
        
        commitToRepo(Topic(),Keywords(),startWithMsg())
        exitProgram()
        
    elif(inputAction == "op"):    
        print("""
        Options:
            - Action:
                    - s: start to assemble a commit message
                    - op: display options
                    - <Enter> quit script

            - Type: 
                    - Select a basic topic for the commit
                    - If you can't put it into one word, 
                      your probably take to many steps in
                      one commit.

            - Author(s): 
                    - Name one or more authors
                    - Type d and the script will use the default
                      name that is currently listed in the git 
                      config file.

            - Keyword(s):
                    - Add some keywords to the commit

            - Changes:
                    - Helps you to specify the impact of
                      your commit
                    - Does it effect one file in a package 
                      or the whole project ?
                    - Module / Submodule options: for Gradle
                      Moduls

            - Branch:
                    - Specify the branch where the commit is
                      located

            - Description of Changes:
                    - Specify what the commit is about to do     
        """)
        main()
    else:
        exitProgram()

main()    